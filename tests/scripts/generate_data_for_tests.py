"""This is the main script run by the nox session that generates data found in
``./tests/data-for-tests/generated``. Some data is generated by other scripts in this directory,
that needs to be
"""
import pathlib
import shutil
import sys

import vocalpy as voc

HERE = pathlib.Path(__file__).parent

# we append project root to path so we don't need to re-declare constants here
sys.path.insert(
    0, str(HERE / '..' / '..')
)


from tests.fixtures.audio import AUDIO_LIST_CBIN, BIRDSONGREC_WAV_LIST
from tests.fixtures import GENERATED_TEST_DATA_ROOT, PATHS_DIR, SPECTROGRAM_DIR


# these are the dirs that this script actually makes
DATA_ROOTS_WITH_SUBDIRS = PATHS_DIR / 'root_with_subdirs_to_test_paths'
SPECT_NPZ_DIR = SPECTROGRAM_DIR / 'spect_npz'


def mkdirs():
    print(
        f"Making data roots with subdirs for testing ``vocalpy.paths``: {DATA_ROOTS_WITH_SUBDIRS}"
    )
    DATA_ROOTS_WITH_SUBDIRS.mkdir()
    print(
        f"Making spectrogram directory for testing ``vocalpy.Spectrogram``: {SPECT_NPZ_DIR}"
    )
    SPECT_NPZ_DIR.mkdir()


def generate_npz_spect_files():
    """This generates .npz files with spectrograms in them,
    so we can test that we can load these files
    """
    print(
        f"Making spectrogram files in spectrogram directory, for testing ``vocalpy.Spectrogram``: {SPECT_NPZ_DIR}"
    )
    for wav_path in BIRDSONGREC_WAV_LIST:
        sound = voc.Sound.read(wav_path)
        spect = voc.spectrogram(sound)
        dst_path = SPECT_NPZ_DIR / f'{wav_path.name}.npz'
        print(
            f"Writing spectrogram to path: {dst_path}"
        )
        spect.write(path=dst_path)


def generate_data_roots_with_subdirs():
    print(
        "Copying sound files into sub-dirs for testing ``vocalpy.paths``"
    )
    for ext, path_list in (
        ('wav', BIRDSONGREC_WAV_LIST),
        ('cbin', AUDIO_LIST_CBIN),
    ):
        print(
            f"Copying files with extension: {ext}"
        )
        # ---- set-up
        data_root = DATA_ROOTS_WITH_SUBDIRS / f'{ext}'
        print(
            f"Making dir for sound files with extension {ext}: {data_root}"
        )
        data_root.mkdir()

        dst1 = data_root / f'{ext}-first-half'
        print(
            f"Making sub-dir for sound files with extension {ext}: {dst1}"
        )
        dst1.mkdir()
        dst2 = data_root / f'{ext}-second-half'
        print(
            f"Making sub-dir for sound files with extension {ext}: {dst2}"
        )
        dst2.mkdir()

        half_ind = len(path_list) // 2
        paths1 = path_list[:half_ind]
        paths2 = path_list[half_ind:]

        for dst, paths in zip(
            (dst1, dst2),
            (paths1, paths2)
        ):
            for path in paths:
                path_dst = dst / path.name
                print(
                    f"Copying sound file to path: {path_dst}"
                )
                shutil.copy(path, path_dst)


def check_ava_segment_data_exists():
    from tests.fixtures.segments import AVA_SEGMENT_TXT_DIR, AVA_SEGMENT_TXT_LIST
    if len(AVA_SEGMENT_TXT_LIST) < 1:
        raise ValueError(
            f"No segment .txt files from ava segmentation found in directory: {AVA_SEGMENT_TXT_DIR}."
            f"Run the nox session 'test-data-generate-ava-segment' before running the session that runs this script."
        )

def main():
    """Makes directories in `./tests/data-for-tests/generated
    (after those have been removed by running ``nox -s test-data-clean-generated``).
    Then runs helper functions that generate test data from source.
    """
    print(
        f"Making sub-directories in generated test data dir: {GENERATED_TEST_DATA_ROOT}"
    )
    mkdirs()
    generate_npz_spect_files()
    generate_data_roots_with_subdirs()
    check_ava_segment_data_exists()


main()
